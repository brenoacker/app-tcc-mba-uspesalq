services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Porta padrão para conexão AMQP
      - "15672:15672" # Porta para a interface de gerenciamento
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: always

  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./src:/src
    ports:
      - "8000:8000"
      # - "5678:5678"
      - "9464:9464" # Porta para métricas do Prometheus
    environment:
      - PYTHONPATH=/src
      - CONNECTION=${CONNECTION}
      - SERVICE_NAME=${SERVICE_NAME}
      - SERVICE_VERSION=${SERVICE_VERSION}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
      - WORKERS_COUNT=8  # Aumentando o número de workers com base no cálculo (2 x num_cores) + 1
    # Otimizando a configuração do Uvicorn para melhor throughput
    command: >
      sh -c "PYTHONPATH=/src uvicorn infrastructure.api.main:app 
      --host 0.0.0.0 
      --port 8000 
      --reload 
      --workers ${WORKERS_COUNT:-8} 
      --limit-concurrency 1000 
      --backlog 2048 
      --timeout-keep-alive 60"
    # command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn infrastructure.api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  postgres:
    image: postgres:13-alpine
    container_name: db
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Otimizações de performance para o PostgreSQL
      - POSTGRES_INITDB_ARGS=--data-checksums
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=768MB
      - POSTGRES_WORK_MEM=16MB
      - POSTGRES_MAINTENANCE_WORK_MEM=128MB
      - POSTGRES_MAX_PARALLEL_WORKERS=4
      - POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER=2
    command: postgres -c shared_buffers=256MB -c max_connections=200
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pd-admin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=123456
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "16543:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Serviços de observabilidade
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"   # Jaeger Thrift over UDP
      - "6832:6832/udp"   # Jaeger Thrift over UDP (compact)
      - "5778:5778"       # Configurações via HTTP
      - "16686:16686"     # Interface web Jaeger
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
      - "14250:14250"     # Jaeger Protobuf via gRPC
      - "14268:14268"     # Jaeger Thrift via HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always

volumes:
  postgres_volume:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:
